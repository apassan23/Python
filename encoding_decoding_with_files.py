import pickle

# dictionary for storing words for numbers
numbers = {
    '0': 'zero',
    '1': 'one',
    '2': 'two',
    '3': 'three',
    '4': 'four',
    '5': 'five',
    '6': 'six',
    '7': 'seven',
    '8': 'eight',
    '9': 'nine'
}

# for storing the position of the whitespaces
whitespacePos = []

# utlity function to calculate reverse of an integer
# @param number: int
# OUTPUT returns int -> reverse of the number
def reverse(number):
    result = 0
    while number != 0:
        # taking the alast digit
        digit = number % 10
        # lef shifting the result
        result = (result * 10) + digit
        # getting rid of the digit we already processed
        # and type casting it to avoid anomalies
        number = int(number / 10)
    return result

# function for encoding the message and write it
# to file
# @param message: str -> message to encode
# @param fname:str -> name of the file to write to
# OUTPUT returns str -> encoded string
def encode(message, fname):
    encodedString = ''
    # clearing the initial list
    whitespacePos.clear()
    for index in range(len(message)):
        # checking if the the character is an alphabet
        if message[index].isalpha():
            # taking the ASCII value with the function ord() and
            # reversing and subsequently type casting it to append to
            # string
            encodedString += str(reverse(ord(message[index]))) + ' '
        # if it is a digit
        elif message[index].isdigit():
            # text of the number is fetched from the dictionary and
            # and its reverse value is appended to the encoded message
            encodedString += numbers[message[index]][::-1] + ' '
        # other special characters
        else:
            # for whitespaces
            if message[index] == ' ':
                whitespacePos.append(index)
            # special characters are append as is
            encodedString += message[index] + ' '
    encodedString = encodedString.strip()
    writeFile(fname, encodedString)
    return encodedString


# utility function to get a key from the dictionary
# and if its not present then return the default one
# @param dictionary: dict -> dictionary for text 
# values of number
# @param value: str -> the value whose key is to be
# searched
# @param default: str -> default value
# OUTPUT returns str -> key or the default value
def getKey(dictionary, value, default=''):
    keys = list(dictionary.keys())
    values = list(dictionary.values())
    # checking if the value is actually in the dictionary
    if value in values:
        pos = values.index(value)
        return keys[pos]
    # else returning the default value
    else:
        return default

# Function to decode the encoded message
# @param message: str -> encoded message
# OUTPUT returns str -> decoded message
def decode(message):
    decodedString = ''
    for string in message.split(' '):
        # checking if the string is digit
        if string.isdigit():
            # calculating the reverse of the number and
            # appending the character corresponding to the
            # ASCII value generated by the above reverse
            decodedString += chr(reverse(int(string)))
        # else its a reverse of a text of a number or a
        # special character
        else:
            # getting the key from the dictionary and if its not in
            # the dictionary then its a special character, then it
            # should be returned as is
            decodedString += getKey(numbers, string[::-1], string)

    # adding back the whitespace if there were any
    for pos in whitespacePos:
        decodedString = decodedString[:pos] + " " + decodedString[pos:]
    return decodedString

# Function to write content to file
# @param fname: str -> name of the file
# @param content: any -> the content to write
# @param mode: str -> the mode to write in
# OUTPUT returns nothing
def writeFile(fname, content, mode='xb'):
    try:
        file = open(fname,mode)
        # write to file with pickle
        pickle.dump(content, file)
        file.close()
    except FileExistsError:
        # file already exists, so exit
        print(f"Error: File \"{fname}\" already exists")
        exit()

# Function to read from a file
# @param fname: str -> name of the file
# @param mode: str -> the mode to write in
# OUTPUT returns the content read
def readFile(fname, mode='rb'):
    content = ""
    try:
        file = open(fname, mode)
        while True:
            try:
                # loading the content from the fiel
                content += pickle.load(file)
            except EOFError:
                # EOF reached
                break
    except FileNotFoundError:
        # file not found
        print(f"Could not find \"{fname}\"")
    return content

# Function to decode the message from a file
# @param fname: str -> name of the file
# OUTPUT returns str -> decoded string
def decodeFrom(fname):
    # reading the file
    encoded = readFile(fname)
    return decode(encoded)

message = input("Enter the message: ")
encoded = encode(message, "encoded.txt")
print(f"Encoded Text: {encoded}")
print("Encoded Text was written to \"encoded.txt\"")
print("Decoded Text: {}".format(decodeFrom("encoded.txt")))

