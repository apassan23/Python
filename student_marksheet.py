import pickle

# list for storing name of the file(s) created
marksheets = []

# Function for writing to Files in binary form
# @param fname: string -> path/filename of file to write to
# @param content: obj -> content to write to file
# @param mode: string -> mode for writing to file
# OUTPUT returns nothing
def writeFile(fname, content, mode='xb'):
    try:
        file = open(fname, mode)
    except FileExistsError:
        # File already exists, open in append mode
        file = open(fname, 'ab')
    finally:
        # writing the content with pickle
        pickle.dump(content, file)
        file.close()

# Function to write to the autogenerated file in the format <name_rollno>
# @param data: dict -> dictionary containing a student's info
# OUTPUT returns nothing
def writeToMarksheet(data):
    # extracting the name and the roll no for proper formatting
    # of the filename
    fileName = "{}_{}".format(data["name"], data["Roll No"])
    # storing the filenames to the marksheets list
    marksheets.append(fileName)
    try:
        # open the file in create mode
        file = open(fileName, 'x')
        file.write("\t\t\tMARKSHEET")
        file.write("\nName: {}".format(data["name"]))
        file.write("\nRoll Number: {}".format(data["Roll No"]))
        # extracting the subjects from keys of the data dictionary
        subjects = list(data.keys())[2:]
        file.write("\n\n\t\tSUBJECT\t\tMARKS")
        for key in subjects:
            file.write("\n\t\t{}\t\t{}".format(key, data[key]))
        file.close()
    except FileExistsError:
        # file does not exists
        print(f"File \"{fileName}\" already exists")

# Function for writing the max marks in each subject
# @param content: dict -> dictionary of max marks with
# name of the student who obtained those marks
# OUTPUT returns nothing
def writeMaxMarks(content):
    try:
        # Opening the file in create mode
        file = open("max_marks.txt", 'x')
        # Writing the boilerplate at the time
        # of file creation
        file.write("\t\tSUBJECT WISE TOPPERS")
        file.write("\nSUBJECT\t\tNAME\t\tMARKS")
    except FileExistsError:
        # File exists so open it in append mode
        file = open("max_marks.txt", 'a')
    finally:
        # iterating over the keys of content which
        # are subjects themselves
        for subject in list(content.keys()):
            file.write("\n{}\t\t{}\t\t{}".format(
                subject, content[subject]["name"], content[subject]["value"]))
        file.close()

# Function for filtering subjects and other info
# @param data: string
# OUTPUT returns True or False
# True if the key is neither "name" nor "Roll No"
def subjectFilter(data):
    return data != "name" and data != "Roll No"

# Function to generate marksheet both of individual student
# and Subject wise max marks and their scorers
# @param: fname -> name of the file to write to
# @param: mode -> mode for reading the file
# OUTPUT returns nothing
def generateMarksheet(fname, mode='rb'):
    # dictionary to store max marks of each subject
    maxMarks = {}
    # flag for checking if the subjects are extracted
    # for the first time when reading the file
    subjectsLoaded = False
    # for storing subjects
    subjects = []
    try:
        file = open(fname, mode)
        while True:
            try:
                # loading the data with pickle
                data = pickle.load(file)
                if not(subjectsLoaded):
                    # filtering the subjects from keys with filter() and
                    # subjectFilter()
                    subjects = list(filter(subjectFilter, list(data.keys())))
                    # set the flag
                    subjectsLoaded = True
                    # iterating over subjects to finds max marks in that
                    # subject
                for subject in subjects:
                    # if maxMarks has the subject, it is used as is otherwise
                    # an empth dictionary is returned and the returned dictionary
                    # is used to retrieve the current max value if there is any
                    # otherwise 0 is returned
                    if data[subject] > maxMarks.get(subject, {}).get("value", 0):
                        maxMarks[subject] = {
                            # current max marks
                            "value": data[subject],
                            # who scored the max marks
                            "name": data["name"]
                        }
                # writing to marksheet for each student
                writeToMarksheet(data)
            except EOFError:
                # EOF Encountered
                # write all the maximum works calculated above
                writeMaxMarks(maxMarks)
                break
        file.close()
    except FileNotFoundError:
        # File not Found
        print(f"The File \"{fname}\" does not exists")

# Function to take input from the user
# INPUT none
# OUTPUT returns nothing
def getInput():
    n = int(input("Enter Number of Students in class: "))
    subjects = input("Enter Subjects Seperated by whitespaces: ").split()
    recordFile = 'marks.txt'
    for i in range(n):
        print(f"\n>>> Enter Details of Student {i + 1}\n ")
        data = {
            "name": input("Enter Student Name: "),
            "Roll No": int(input("Enter Roll Number: "))
        }

        for subject in subjects:
            data[subject] = int(input(f"Enter marks in {subject}: "))

        writeFile(recordFile, data)


getInput()
generateMarksheet('marks.txt')
print(f"\n{len(marksheets)} File(s)/Marksheet(s) Created : {marksheets}")
print("Marksheet for Subject Wise Maximum Marks : max_marks.txt")
